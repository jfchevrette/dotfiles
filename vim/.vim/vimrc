" Bootstrap vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'takac/vim-hardtime'
let g:hardtime_default_on = 1

" ui
Plug 'arcticicestudio/nord-vim'

" syntax/filetypes
Plug 'fatih/vim-go'
Plug 'elzr/vim-json', {'for': 'json'}
Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}
Plug 'fatih/vim-nginx', {'for': 'nginx'}

" intellisense
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Linting
" Plug 'w0rp/ale'

" utils
Plug 'junegunn/fzf', {'do': { -> fzf#install() }}
Plug 'junegunn/fzf.vim'
"Plug 'Raimondi/delimitMate'
"Plug 'tpope/vim-commentary'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-fugitive'
"Plug 'ConradIrwin/vim-bracketed-paste'

call plug#end() 

nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gr <Plug>(coc-references)
nnoremap <C-p> :Gfiles<CR>

" ================
" =   Settings   =
" ================

if !has('nvim')
  set nocompatible
  filetype off
  filetype plugin indent on
  
  set ttyfast
  set ttymouse=xterm2
  set ttyscroll=3
endif

set laststatus=2
set encoding=utf-8              " Set default encoding to UTF-8
set fileencoding=utf-8
set fileencodings=utf-8
set autoread                    " Automatically reread changed files without asking me anything
set autoindent                  
set backspace=indent,eol,start  " Makes backspace key more powerful.

set hlsearch                    " Highlight found searches
set incsearch                   " Shows the match while typing
set ignorecase               " Ignore case when searching, typing commands, completing, etc...
set smartcase                " ...but not if it begins with upper case

set noerrorbells             " No beeps
set number                   " Show line numbers
set relativenumber
set showcmd                  " Show me what I'm typing
set showmode                 " Show current mode.

set nobackup                 " Don't create annoying backup files
set noswapfile               " Don't use swapfile

set splitright               " Split vertical to the right
set splitbelow               " split horizontal down
set autowrite                " Automatically save before switching buffer
set hidden                   " Hide buffers when abandonning it instead of unloading it
set fileformats=unix,dos,mac " Prefer Unix over Windows over OS9 formats
set noshowmatch              " Do not show matching brackets
set nocursorcolumn           " Do not show the column the cursor is on
set cursorline               " Dont show the line the cursor is on
set completeopt=menu,menuone " Autocomplete menu on insert mode
set pumheight=10             " Completion indow max items

set tabstop=2
set softtabstop=0
set shiftwidth=2
set expandtab

set clipboard^=unnamed
set clipboard^=unnamedplus

set lazyredraw " Do not redraw screen when executing macros or commands that have not been typed
set re=1
syntax sync minlines=256
set synmaxcol=300

set undofile
set undodir=~/.vim/tmp/undo//

set modeline
set modelines=10

colorscheme nord

" ================
" =   Mappings   =
" ================

" use a mapleader variable 
let   mapleader = ","
let g:mapleader = ","

" close quickfix window
nnoremap <C-n> :cnext<CR>
nnoremap <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" fast saving
nnoremap <leader>w :w!<CR>
nnoremap <silent> <leader>q :q!<CR>

" center the screen
nnoremap <space> zz

" better split management
nnoremap <C-H> :call WinMove('h')<CR>
nnoremap <C-J> :call WinMove('j')<CR>
nnoremap <C-K> :call WinMove('k')<CR>
nnoremap <C-L> :call WinMove('l')<CR>
nnoremap <C-X> :hide<CR>
nnoremap <leader>x :hide<CR>
nnoremap <leader>o :only<CR>
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

" center on searching when going to the next match
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" ======================
" =   Plugin configs   =
" ======================

" ===== vim-go =====
let g:go_metalinter_autosave = 1
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_list_type = "quickfix"
let g:go_term_enabled = 1
let g:go_term_height = 10
let g:go_highlight_space_tab_error = 1
let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1

augroup gocmds
  au!
  autocmd FileType go nmap <buffer> <Leader>s  <Plug>(go-def-split)
  autocmd FileType go nmap <buffer> <Leader>v  <Plug>(go-def-vertical)
  autocmd FileType go nmap <buffer> <Leader>i  <Plug>(go-info)
  autocmd FileType go nmap <buffer> <Leader>l  <Plug>(go-metalinter)
  autocmd FileType go nmap <buffer> <leader>r  <Plug>(go-run)
  autocmd FileType go nmap <buffer> <leader>c  <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <buffer> <leader>t  <Plug>(go-test)
  autocmd FileType go nmap <buffer> <Leader>d  <Plug>(go-doc)
augroup END

" ====================
" =   Autocommands   =
" ====================
"
" Only show cursorline in the current window and in normal mode
augroup cursorline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

" open help vertically
augroup verticalhelp
  au!
  command! -nargs=* -complete=help Help vertical belowright help <args>
  autocmd FileType help wincmd L
  autocmd FileType help setlocal nohidden
augroup END

augroup misc_stuff
  " cd into the file directory on enter
  autocmd BufEnter * silent! lcd %:p:h

  " Buffers/Files events
  autocmd BufNewFile,BufRead *.go   setlocal noet ts=4 sw=4 sts=4
  autocmd BufNewFile,BufRead *.vim  setlocal noet ts=2 sw=2 sts=2
  autocmd BufNewFile,BufRead *.md   setlocal noet ts=4 sw=4
  autocmd FileType json setlocal   et ts=2 sw=2
  autocmd FileType ruby setlocal   et ts=2 sw=2
  autocmd BufNewFile,BufRead .nginx.conf*,nginx.conf* setf nginx
augroup END
